name: shadowsocksr build matrix - cmake

on: 
  push:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        qt_version: [5.15.0]
        platform: [ubuntu-16.04, macos-latest, windows-latest]
        arch: [x86, x64]
        include: 
          - platform: windows-latest
            arch: x86
            qtarch: win32_msvc2017
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2017_64
        exclude:
          - platform: ubuntu-16.04
            arch: x86
          - platform: macos-latest
            arch: x86
          - platform: windows-latest
            arch: x86
            qt_version: 5.11.1
      fail-fast: false
        
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@master
      - name: Install Python 3.7 version
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
          architecture: ${{ matrix.arch }}
      - name: Restoring submodules
        run: git submodule update --init
# =========================================================================================================
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with: 
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v2.5.0
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
# =========================================================================================================
      - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages 
        if: matrix.platform == 'ubuntu-16.04'
        run: |
          sudo add-apt-repository ppa:webispy/grpc
          sudo add-apt-repository ppa:carsten-uppenbrink-net/openssl
          sudo apt update
          sudo apt install -y libssl-dev tree ninja-build 
# --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages 
        if: matrix.platform == 'macos-latest'
        run: |
          brew reinstall openssl
          brew reinstall ninja
# --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
        shell: bash
        if: matrix.platform == 'windows-latest'
        run: |
         mkdir -p ./libs
         choco install -y ninja
         curl -o ./libs/Qv2ray-deps-openssl-${{ matrix.arch }}-windows.7z -L https://github.com/DuckVador/shadowsocksr-uvw-deps/releases/download/release/Qv2ray-deps-openssl-${{ matrix.arch }}-windows.7z
      - name: Win-${{ matrix.arch }} - Build preparation - Extract Dependencies
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: ./libs/Qv2ray-deps-openssl-${{ matrix.arch }}-windows.7z
          pathTarget: ./libs
# ========================================================================================================= Generate MakeFile and Build
      - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1 -DOPENSSL_LIBRARIES=/usr/local/opt/openssl@1.1/lib 
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)
# --------------------------------------------------------        
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-windows-static
          cmake --build . --parallel $(nproc)
# --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
        if: matrix.platform == 'ubuntu-16.04'
        shell: bash
        env:
          CC: /usr/bin/gcc-9
          CXX: /usr/bin/g++-9
        run: |
          mkdir build
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release 
          cmake --build . --parallel $(nproc)

      - name: Win-${{ matrix.arch }}  - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
            pathSource: ./build/src/ssr-local.exe
            pathTarget: ./release.7z

      - name: Unix-${{ matrix.arch }}  - Create 7z Release
        if: matrix.platform != 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
            pathSource: ./build/src/ssr-local
            pathTarget: ./release.7z

      - name: Uploading artifact ${{ matrix.platform }}
        uses: actions/upload-artifact@master
        with:
            name: ssr-local-${{ matrix.platform }}-${{ matrix.arch }}.7z
            path: release.7z

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
            repo_token: ${{ secrets.GITHUB_TOKEN }}
            file: release.7z
            asset_name: ssr-local-${{ matrix.platform}}-${{ matrix.arch }}.7z
            tag: release
            overwrite: true
